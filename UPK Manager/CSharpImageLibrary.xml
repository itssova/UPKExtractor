<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpImageLibrary</name>
    </assembly>
    <members>
        <member name="T:CSharpImageLibrary.General.DDSGeneral">
            <summary>
            Provides general functions specific to DDS format
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Read_DDS_HEADER(CSharpImageLibrary.General.DDSGeneral.DDS_HEADER,System.IO.BinaryReader)">
            <summary>
            Reads DDS header from file.
            </summary>
            <param name="h">Header struct.</param>
            <param name="r">File reader.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Read_DDS_PIXELFORMAT(CSharpImageLibrary.General.DDSGeneral.DDS_PIXELFORMAT,System.IO.BinaryReader)">
            <summary>
            Reads DDS pixel format.
            </summary>
            <param name="p">Pixel format struct.</param>
            <param name="r">File reader.</param>
        </member>
        <member name="T:CSharpImageLibrary.General.DDSGeneral.DDS_HEADER">
            <summary>
            Contains information about DDS Headers. 
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.DDSGeneral.DDS_PIXELFORMAT">
            <summary>
            Contains information about DDS Pixel Format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Build_DDS_Header(System.Int32,System.Int32,System.Int32,CSharpImageLibrary.General.ImageEngineFormat)">
            <summary>
            Builds a header for DDS file format using provided information.
            </summary>
            <param name="Mips">Number of mips in image.</param>
            <param name="Height">Image Height.</param>
            <param name="Width">Image Width.</param>
            <param name="surfaceformat">DDS FourCC.</param>
            <returns>Header for DDS file.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Write_DDS_Header(CSharpImageLibrary.General.DDSGeneral.DDS_HEADER,System.IO.BinaryWriter)">
            <summary>
            Write DDS header to stream via BinaryWriter.
            </summary>
            <param name="header">Populated DDS header by Build_DDS_Header.</param>
            <param name="writer">Stream to write to.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.WriteDDS(System.Collections.Generic.List{CSharpImageLibrary.General.MipMap},System.IO.Stream,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER,System.Action{System.IO.Stream,System.IO.Stream,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Writes a DDS file using a format specific function to write pixels.
            </summary>
            <param name="MipMaps">List of MipMaps to save. Pixels only.</param>
            <param name="Destination">Stream to save to.</param>
            <param name="header">Header to use.</param>
            <param name="PixelWriter">Function to write pixels. Optionally also compresses blocks before writing.</param>
            <param name="isBCd">True = Block Compressed DDS. Performs extra manipulation to get and order Texels.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.WriteMipMap(System.IO.Stream,System.Int32,System.Int32,System.Action{System.IO.Stream,System.IO.Stream,System.Int32,System.Int32},System.Boolean)">
            <summary>
            Write a mipmap to a stream using a format specific pixel writing function.
            </summary>
            <param name="pixelData">Pixels of mipmap.</param>
            <param name="Width">Mipmap Width.</param>
            <param name="Height">Mipmap Height.</param>
            <param name="PixelWriter">Function to write pixels with. Also compresses if block compressed texture.</param>
            <param name="isBCd">True = Block Compressed DDS.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Decompress8BitBlock(System.IO.Stream,System.Boolean)">
            <summary>
            Decompresses an 8 bit channel.
            </summary>
            <param name="compressed">Compressed image data.</param>
            <param name="isSigned">true = use signed alpha range (-254 -- 255), false = 0 -- 255</param>
            <returns>Single channel decompressed (16 bits).</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressRGBBlock(System.IO.Stream,System.Boolean)">
            <summary>
            Decompresses a 3 channel (RGB) block.
            </summary>
            <param name="compressed">Compressed image data.</param>
            <param name="isDXT1">True = DXT1, otherwise false.</param>
            <returns>16 pixel BGRA channels.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.DDSGeneral.RGBColour">
            <summary>
            This region contains stuff adpated/taken from the DirectXTex project: https://github.com/Microsoft/DirectXTex
            Things needed to be in the range 0-1 instead of 0-255, hence new struct etc
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Compress8BitBlock(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Compresses single channel using Block Compression.
            </summary>
            <param name="texel">4 channel Texel to compress.</param>
            <param name="channel">0-3 (BGRA)</param>
            <param name="isSigned">true = uses alpha range -255 -- 255, else 0 -- 255</param>
            <returns>8 byte compressed texel.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.BuildMipMaps(System.Collections.Generic.List{CSharpImageLibrary.General.MipMap},System.Boolean)">
            <summary>
            Ensures all Mipmaps are generated in MipMaps.
            </summary>
            <param name="MipMaps">MipMaps to check.</param>
            <param name="mergeAlpha">True = flattens alpha, directly affecting RGB.</param>
            <returns>Number of mipmaps present in MipMaps.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.GetTexel(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Gets 4x4 texel block from stream.
            </summary>
            <param name="pixelData">Image pixels.</param>
            <param name="Width">Width of image.</param>
            <param name="Height">Height of image.</param>
            <returns>4x4 texel.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.ReadDXTColour(System.Int32)">
            <summary>
            Reads a packed DXT colour into RGB
            </summary>
            <param name="colour">Colour to convert to RGB</param>
            <returns>RGB bytes</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.BuildDXTColour(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a packed DXT colour from RGB.
            </summary>
            <param name="r">Red byte.</param>
            <param name="g">Green byte.</param>
            <param name="b">Blue byte.</param>
            <returns>DXT Colour</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.Build8BitPalette(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Builds palette for 8 bit channel.
            </summary>
            <param name="min">First main colour (often actually minimum)</param>
            <param name="max">Second main colour (often actually maximum)</param>
            <param name="isSigned">true = sets signed alpha range (-254 -- 255), false = 0 -- 255</param>
            <returns>8 byte colour palette.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.EstimateNumMipMaps(System.Int32,System.Int32)">
            <summary>
            Estimates number of MipMaps for a given width and height EXCLUDING the top one.
            i.e. If output is 10, there are 11 mipmaps total.
            </summary>
            <param name="Width">Image Width.</param>
            <param name="Height">Image Height.</param>
            <returns>Number of mipmaps expected for image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressBC1Block(System.IO.Stream)">
            <summary>
            Read an 8 byte BC1 compressed block from stream.
            </summary>
            <param name="compressed">BC1 compressed stream.</param>
            <returns>BGRA channels.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.CompressBC1Block(System.Byte[])">
            <summary>
            Compress texel to 8 byte BC1 compressed block.
            </summary>
            <param name="texel">4x4 BGRA group of pixels.</param>
            <returns>8 byte BC1 compressed block.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressBC2Block(System.IO.Stream)">
            <summary>
            Reads a 16 byte BC2 compressed block from stream.
            </summary>
            <param name="compressed">BC2 compressed stream.</param>
            <returns>BGRA channels.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressBC3Block(System.IO.Stream)">
            <summary>
            Reads a 16 byte BC3 compressed block from stream.
            </summary>
            <param name="compressed">BC3 compressed image stream.</param>
            <returns>List of BGRA channels.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressATI2Block(System.IO.Stream)">
            <summary>
            Decompresses ATI2 (BC5) block.
            </summary>
            <param name="compressed">Compressed data stream.</param>
            <returns>16 pixel BGRA channels.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.CompressBC5Block(System.Byte[])">
            <summary>
            Compresses texel to 16 byte BC5 block.
            </summary>
            <param name="texel">4x4 BGRA set of pixels.</param>
            <returns>16 byte BC5 block.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.DecompressATI1(System.IO.Stream)">
            <summary>
            Decompresses an ATI1 (BC4) block.
            </summary>
            <param name="compressed">Compressed data stream.</param>
            <returns>BGRA channels (16 bits each)</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.CompressBC4Block(System.Byte[])">
            <summary>
            Compress texel to 8 byte BC4 compressed block.
            </summary>
            <param name="texel">4x4 BGRA set of pixels.</param>
            <returns>8 byte BC4 compressed block.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.CompressBC3Block(System.Byte[])">
            <summary>
            Compress texel to 16 byte BC3 compressed block.
            </summary>
            <param name="texel">4x4 BGRA set of pixels.</param>
            <returns>16 byte BC3 compressed block.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.DDSGeneral.CompressBC2Block(System.Byte[])">
            <summary>
            Compress texel to 16 byte BC2 compressed block.
            </summary>
            <param name="texel">4x4 BGRA set of pixels.</param>
            <returns>16 byte BC2 compressed block.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageEngineImage">
            <summary>
            Represents an image. Can use Windows codecs if available.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.Width">
            <summary>
            Width of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.Height">
            <summary>
            Height of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.NumMipMaps">
            <summary>
            Number of mipmaps present.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.Format">
            <summary>
            Format of image and whether it's mippable.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.MipMaps">
            <summary>
            List of mipmaps. Single level images only have one mipmap.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngineImage.FilePath">
            <summary>
            Path to file. Null if no file e.g. thumbnail from memory.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.String)">
            <summary>
            Creates a new ImageEngineImage from file.
            </summary>
            <param name="imagePath">Path to image file.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates new ImageEngineImage from stream.
            Does NOT require that stream remains alive.
            </summary>
            <param name="stream">Image to load.</param>
            <param name="extension">Extension of original file.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Loads an image from a file and scales (aspect safe) to a maximum size.
            e.g. 1024x512, desiredMaxDimension = 128 ===> Image is scaled to 128x64.
            </summary>
            <param name="imagePath">Path to image file.</param>
            <param name="desiredMaxDimension">Max dimension to save.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Loads an image from a stream and scales (aspect safe) to a maximum size. Does NOT require that stream remains alive.
            e.g. 1024x512, desiredMaxDimension = 128 ===> Image is scaled to 128x64.
            </summary>
            <param name="stream">Full image stream.</param>
            <param name="extension">File extension of original image.</param>
            <param name="desiredMaxDimension">Maximum dimension.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.Byte[])">
            <summary>
            Loads an image from a byte array.
            </summary>
            <param name="imageFileData">Fully formatted image file data</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.#ctor(System.Byte[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Loads an image from a byte array and scales (aspect safe) to a maximum size.
            e.g. 1024x512, desiredMaxDimension = 128 ===> Image is scaled to 128x64.
            </summary>
            <param name="imageFileData">Full image file data.</param>
            <param name="desiredMaxDimension">Maximum dimension.</param>
            <param name="enforceResize">True = resizes to desiredMaxDimension if no suitable mipmap.</param>
            <param name="mergeAlpha">ONLY valid when enforeResize = true. True = flattens alpha, directly affecting RGB.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.Save(System.String,CSharpImageLibrary.General.ImageEngineFormat,CSharpImageLibrary.General.MipHandling,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves image in specified format to file. If file exists, it will be overwritten.
            </summary>
            <param name="destination">File to save to.</param>
            <param name="format">Desired image format.</param>
            <param name="GenerateMips">True = Generates all mipmaps. False = Uses largest available Mipmap.</param>
            <param name="desiredMaxDimension">Maximum value of either image dimension.</param>
            <param name="mergeAlpha">DXT1 only. True = Uses threshold value and alpha values to mask RGB.</param>
            <param name="mipToSave">Index of mipmap to save as single image.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.Save(System.IO.Stream,CSharpImageLibrary.General.ImageEngineFormat,CSharpImageLibrary.General.MipHandling,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves fully formatted image in specified format to stream.
            </summary>
            <param name="destination">Stream to save to.</param>
            <param name="format">Format to save as.</param>
            <param name="GenerateMips">True = Generates all mipmaps. False = Uses largest available Mipmap.</param>
            <param name="desiredMaxDimension">Maximum value of either image dimension.</param>
            <param name="mergeAlpha">ONLY valid when desiredMaxDimension != 0. True = alpha flattened, directly affecting RGB.</param>
            <param name="mipToSave">Selects a certain mip to save. 0 based.</param>
            <returns>True if success</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.GeneratePreview(System.Int32,System.Boolean)">
            <summary>
            Gets a preview.
            </summary>
            <param name="ShowAlpha">False = Creates a preview without alpha.</param>
            <param name="index">Index of mipmap to preview.</param>
            <returns>BitmapImage of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.Dispose">
            <summary>
            Releases resources used by mipmap MemoryStreams.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.GetGDIBitmap(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a GDI+ bitmap from largest mipmap.
            Does NOT require that image remains alive.
            </summary>
            <param name="ignoreAlpha">True = Previews image without alpha channel.</param>
            <param name="maxDimension">Largest size to display.</param>
            <param name="mergeAlpha">ONLY valid when maxDimension is set. True = flattens alpha, directly affecting RGB.</param>
            <returns>GDI+ bitmap of largest mipmap.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.Resize(System.Int32,System.Boolean)">
            <summary>
            Scales top mipmap and DESTROYS ALL OTHERS.
            </summary>
            <param name="DesiredDimension">Desired size of image.</param>
            <param name="mergeAlpha">True = flattens alpha, directly affecting RGB.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.Resize(System.Double,System.Boolean)">
            <summary>
            Scales top mipmap and DESTROYS ALL OTHERS.
            </summary>
            <param name="scale">Scaling factor. </param>
            <param name="mergeAlpha">True = flattens alpha, directly affecting RGB.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngineImage.GetWPFBitmap(System.Int32,System.Boolean)">
            <summary>
            Creates a WPF Bitmap from largest mipmap.
            Does NOT require that image remains alive.
            </summary>
            <param name="mergeAlpha">Only valid if maxDimension set. True = flattens alpha, directly affecting RGB.</param>
            <param name="maxDimension">Resizes image or uses a mipmap if available.</param>
            <returns>WPF bitmap of largest mipmap.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.MipMap">
            <summary>
            Represents a mipmap of an image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.MipMap.BaseImage">
            <summary>
            Pixels in bitmap image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.MipMap.Width">
            <summary>
            Mipmap width.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.MipMap.Height">
            <summary>
            Mipmap height.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.TGAFormat">
            <summary>
            The Targa format of the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.TGAFormat.UNKNOWN">
            <summary>
            Unknown Targa Image format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.TGAFormat.ORIGINAL_TGA">
            <summary>
            Original Targa Image format.
            </summary>
            <remarks>Targa Image does not have a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="F:CSharpImageLibrary.General.TGAFormat.NEW_TGA">
            <summary>
            New Targa Image format
            </summary>
            <remarks>Targa Image has a TargaFooter with a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="T:CSharpImageLibrary.General.ColorMapType">
            <summary>
            Indicates the type of color map, if any, included with the image file. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ColorMapType.NO_COLOR_MAP">
            <summary>
            No color map was included in the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ColorMapType.COLOR_MAP_INCLUDED">
            <summary>
            Color map was included in the file.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageType">
            <summary>
            The type of image read from the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.NO_IMAGE_DATA">
            <summary>
            No image data was found in file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.UNCOMPRESSED_COLOR_MAPPED">
            <summary>
            Image is an uncompressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.UNCOMPRESSED_TRUE_COLOR">
            <summary>
            Image is an uncompressed, RGB image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.UNCOMPRESSED_BLACK_AND_WHITE">
            <summary>
            Image is an uncompressed, Greyscale image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.RUN_LENGTH_ENCODED_COLOR_MAPPED">
            <summary>
            Image is a compressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.RUN_LENGTH_ENCODED_TRUE_COLOR">
            <summary>
            Image is a compressed, RGB image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageType.RUN_LENGTH_ENCODED_BLACK_AND_WHITE">
            <summary>
            Image is a compressed, Greyscale image.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.VerticalTransferOrder">
            <summary>
            The top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.VerticalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.VerticalTransferOrder.BOTTOM">
            <summary>
            Transfer order of pixels is from the bottom to top.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.VerticalTransferOrder.TOP">
            <summary>
            Transfer order of pixels is from the top to bottom.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.HorizontalTransferOrder">
            <summary>
            The left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.HorizontalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.HorizontalTransferOrder.RIGHT">
            <summary>
            Transfer order of pixels is from the right to left.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.HorizontalTransferOrder.LEFT">
            <summary>
            Transfer order of pixels is from the left to right.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.FirstPixelDestination">
            <summary>
            Screen destination of first pixel based on the VerticalTransferOrder and HorizontalTransferOrder.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.FirstPixelDestination.UNKNOWN">
            <summary>
            Unknown first pixel destination.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.FirstPixelDestination.TOP_LEFT">
            <summary>
            First pixel destination is the top-left corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.FirstPixelDestination.TOP_RIGHT">
            <summary>
            First pixel destination is the top-right corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.FirstPixelDestination.BOTTOM_LEFT">
            <summary>
            First pixel destination is the bottom-left corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.FirstPixelDestination.BOTTOM_RIGHT">
            <summary>
            First pixel destination is the bottom-right corner of the image.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.RLEPacketType">
            <summary>
            The RLE packet type used in a RLE compressed image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.RLEPacketType.RAW">
            <summary>
            A raw RLE packet type.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.RLEPacketType.RUN_LENGTH">
            <summary>
            A run-length RLE packet type.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.TargaImage">
            <summary>
            Reads and loads a Truevision TGA Format image file.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.#ctor">
            <summary>
            Creates a new instance of the TargaImage object.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Header">
            <summary>
            Gets a TargaHeader object that holds the Targa Header information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.ExtensionArea">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Extension Area information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Footer">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Footer information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Format">
            <summary>
            Gets the Targa format of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Image">
            <summary>
            Gets a Bitmap representation of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Thumbnail">
            <summary>
            Gets the thumbnail of the loaded file if there is one in the file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.FileName">
            <summary>
            Gets the full path and filename of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Stride">
            <summary>
            Gets the byte offset between the beginning of one scan line and the next. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            </remarks>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaImage.Padding">
            <summary>
            Gets the number of bytes used to pad each scan line to meet the Stride value. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            In your loop, you copy the pixels one scanline at a time and take into 
            consideration the amount of padding that occurs due to memory alignment.
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.Finalize">
            <summary>
            TargaImage deconstructor.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.#ctor(System.String)">
            <summary>
            Creates a new instance of the TargaImage object with strFileName as the image loaded.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadTGAFooterInfo(System.IO.BinaryReader)">
            <summary>
            Loads the Targa Footer information from the file.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadTGAHeaderInfo(System.IO.BinaryReader)">
            <summary>
            Loads the Targa Header information from the file.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadTGAExtensionArea(System.IO.BinaryReader)">
            <summary>
            Loads the Targa Extension Area from the file, if it exists.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadImageBytes(System.IO.BinaryReader)">
            <summary>
            Reads the image data bytes from the file. Handles Uncompressed and RLE Compressed image data. 
            Uses FirstPixelDestination to properly align the image.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
            <returns>An array of bytes representing the image data in the proper alignment.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadTGAImage(System.IO.BinaryReader)">
            <summary>
            Reads the image data bytes from the file and loads them into the Image Bitmap object.
            Also loads the color map, if any, into the Image Bitmap.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.GetPixelFormat">
            <summary>
            Gets the PixelFormat to be used by the Image based on the Targa file's attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadThumbnail(System.IO.BinaryReader,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Loads the thumbnail of the loaded image file, if any.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
            <param name="pfPixelFormat">A PixelFormat value indicating what pixel format to use when loading the thumbnail.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.ClearAll">
            <summary>
            Clears out all objects and resources.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.LoadTargaImage(System.String)">
            <summary>
            Loads a Targa image file into a Bitmap object.
            </summary>
            <param name="sFileName">The Targa image filename</param>
            <returns>A Bitmap object with the Targa image loaded into it.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.Dispose">
            <summary>
            Disposes all resources used by this instance of the TargaImage class.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaImage.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true dispose all resources, else dispose only release unmanaged resources.</param>
        </member>
        <member name="T:CSharpImageLibrary.General.TargaHeader">
            <summary>
            This class holds all of the header properties of a Targa image. 
            This includes the TGA File Header section the ImageID and the Color Map.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ImageIDLength">
            <summary>
            Gets the number of bytes contained the ImageIDValue property. The maximum
            number of characters is 255. A value of zero indicates that no ImageIDValue is included with the
            image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetImageIDLength(System.Byte)">
            <summary>
            Sets the ImageIDLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bImageIDLength">The Image ID Length value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ColorMapType">
            <summary>
            Gets the type of color map (if any) included with the image. There are currently 2
            defined values for this field:
            NO_COLOR_MAP - indicates that no color-map data is included with this image.
            COLOR_MAP_INCLUDED - indicates that a color-map is included with this image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetColorMapType(CSharpImageLibrary.General.ColorMapType)">
            <summary>
            Sets the ColorMapType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eColorMapType">One of the ColorMapType enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ImageType">
            <summary>
            Gets one of the ImageType enumeration values indicating the type of Targa image read from the file.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetImageType(CSharpImageLibrary.General.ImageType)">
            <summary>
            Sets the ImageType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eImageType">One of the ImageType enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ColorMapFirstEntryIndex">
            <summary>
            Gets the index of the first color map entry. ColorMapFirstEntryIndex refers to the starting entry in loading the color map.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetColorMapFirstEntryIndex(System.Int16)">
            <summary>
            Sets the ColorMapFirstEntryIndex property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapFirstEntryIndex">The First Entry Index value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ColorMapLength">
            <summary>
            Gets total number of color map entries included.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetColorMapLength(System.Int16)">
            <summary>
            Sets the ColorMapLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapLength">The Color Map Length value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ColorMapEntrySize">
            <summary>
            Gets the number of bits per entry in the Color Map. Typically 15, 16, 24 or 32-bit values are used.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetColorMapEntrySize(System.Byte)">
            <summary>
            Sets the ColorMapEntrySize property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bColorMapEntrySize">The Color Map Entry Size value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.XOrigin">
            <summary>
            Gets the absolute horizontal coordinate for the lower
            left corner of the image as it is positioned on a display device having
            an origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetXOrigin(System.Int16)">
            <summary>
            Sets the XOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sXOrigin">The X Origin value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.YOrigin">
            <summary>
            These bytes specify the absolute vertical coordinate for the lower left
            corner of the image as it is positioned on a display device having an
            origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetYOrigin(System.Int16)">
            <summary>
            Sets the YOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sYOrigin">The Y Origin value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetWidth(System.Int16)">
            <summary>
            Sets the Width property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sWidth">The Width value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetHeight(System.Int16)">
            <summary>
            Sets the Height property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sHeight">The Height value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.PixelDepth">
            <summary>
            Gets the number of bits per pixel. This number includes
            the Attribute or Alpha channel bits. Common values are 8, 16, 24 and 32.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetPixelDepth(System.Byte)">
            <summary>
            Sets the PixelDepth property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bPixelDepth">The Pixel Depth value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ImageDescriptor">
            <summary>
            Gets or Sets the ImageDescriptor property. The ImageDescriptor is the byte that holds the 
            Image Origin and Attribute Bits values.
            Available only to objects in the same assembly as TargaHeader.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.FirstPixelDestination">
            <summary>
            Gets one of the FirstPixelDestination enumeration values specifying the screen destination of first pixel based on VerticalTransferOrder and HorizontalTransferOrder
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.VerticalTransferOrder">
            <summary>
            Gets one of the VerticalTransferOrder enumeration values specifying the top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetVerticalTransferOrder(CSharpImageLibrary.General.VerticalTransferOrder)">
            <summary>
            Sets the VerticalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eVerticalTransferOrder">One of the VerticalTransferOrder enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.HorizontalTransferOrder">
            <summary>
            Gets one of the HorizontalTransferOrder enumeration values specifying the left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetHorizontalTransferOrder(CSharpImageLibrary.General.HorizontalTransferOrder)">
            <summary>
            Sets the HorizontalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eHorizontalTransferOrder">One of the HorizontalTransferOrder enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.AttributeBits">
            <summary>
            Gets the number of attribute bits per pixel.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetAttributeBits(System.Byte)">
            <summary>
            Sets the AttributeBits property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bAttributeBits">The Attribute Bits value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ImageIDValue">
            <summary>
            Gets identifying information about the image. 
            A value of zero in ImageIDLength indicates that no ImageIDValue is included with the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaHeader.SetImageIDValue(System.String)">
            <summary>
            Sets the ImageIDValue property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="strImageIDValue">The Image ID value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ColorMap">
            <summary>
            Gets the Color Map of the image, if any. The Color Map is represented by a list of System.Drawing.Color objects.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.ImageDataOffset">
            <summary>
            Gets the offset from the beginning of the file to the Image Data.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaHeader.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.TargaFooter">
            <summary>
            Holds Footer infomation read from the image file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaFooter.ExtensionAreaOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Extension Area. 
            If the ExtensionAreaOffset is zero, no Extension Area exists in the file.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaFooter.SetExtensionAreaOffset(System.Int32)">
            <summary>
            Sets the ExtensionAreaOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intExtensionAreaOffset">The Extension Area Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaFooter.DeveloperDirectoryOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Developer Area.
            If the DeveloperDirectoryOffset is zero, then the Developer Area does not exist
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaFooter.SetDeveloperDirectoryOffset(System.Int32)">
            <summary>
            Sets the DeveloperDirectoryOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intDeveloperDirectoryOffset">The Developer Directory Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaFooter.Signature">
            <summary>
            This string is formatted exactly as "TRUEVISION-XFILE" (no quotes). If the
            signature is detected, the file is assumed to be a New TGA format and MAY,
            therefore, contain the Developer Area and/or the Extension Areas. If the
            signature is not found, then the file is assumed to be an Original TGA format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaFooter.SetSignature(System.String)">
            <summary>
            Sets the Signature property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strSignature">The Signature value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaFooter.ReservedCharacter">
            <summary>
            A New Targa format reserved character "." (period)
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaFooter.SetReservedCharacter(System.String)">
            <summary>
            Sets the ReservedCharacter property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strReservedCharacter">The ReservedCharacter value read from the file.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaFooter.#ctor">
            <summary>
            Creates a new instance of the TargaFooter class.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.TargaExtensionArea">
            <summary>
            This class holds all of the Extension Area properties of the Targa image. If an Extension Area exists in the file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.ExtensionSize">
            <summary>
            Gets the number of Bytes in the fixed-length portion of the ExtensionArea. 
            For Version 2.0 of the TGA File Format, this number should be set to 495
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetExtensionSize(System.Int32)">
            <summary>
            Sets the ExtensionSize property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intExtensionSize">The Extension Size value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.AuthorName">
            <summary>
            Gets the name of the person who created the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetAuthorName(System.String)">
            <summary>
            Sets the AuthorName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorName">The Author Name value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.AuthorComments">
            <summary>
            Gets the comments from the author who created the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetAuthorComments(System.String)">
            <summary>
            Sets the AuthorComments property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorComments">The Author Comments value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.DateTimeStamp">
            <summary>
            Gets the date and time that the image was saved.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetDateTimeStamp(System.DateTime)">
            <summary>
            Sets the DateTimeStamp property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtDateTimeStamp">The Date Time Stamp value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.JobName">
            <summary>
            Gets the name or id tag which refers to the job with which the image was associated.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetJobName(System.String)">
            <summary>
            Sets the JobName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strJobName">The Job Name value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.JobTime">
            <summary>
            Gets the job elapsed time when the image was saved.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetJobTime(System.TimeSpan)">
            <summary>
            Sets the JobTime property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtJobTime">The Job Time value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.SoftwareID">
            <summary>
            Gets the Software ID. Usually used to determine and record with what program a particular image was created.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetSoftwareID(System.String)">
            <summary>
            Sets the SoftwareID property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareID">The Software ID value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.SoftwareVersion">
            <summary>
            Gets the version of software defined by the SoftwareID.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetSoftwareVersion(System.String)">
            <summary>
            Sets the SoftwareVersion property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareVersion">The Software Version value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.KeyColor">
            <summary>
            Gets the key color in effect at the time the image is saved.
            The Key Color can be thought of as the "background color" or "transparent color".
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetKeyColor(System.Drawing.Color)">
            <summary>
            Sets the KeyColor property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="cKeyColor">The Key Color value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.PixelAspectRatioNumerator">
            <summary>
            Gets the Pixel Ratio Numerator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetPixelAspectRatioNumerator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioNumerator">The Pixel Aspect Ratio Numerator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.PixelAspectRatioDenominator">
            <summary>
            Gets the Pixel Ratio Denominator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetPixelAspectRatioDenominator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioDenominator">The Pixel Aspect Ratio Denominator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.PixelAspectRatio">
            <summary>
            Gets the Pixel Aspect Ratio.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.GammaNumerator">
            <summary>
            Gets the Gamma Numerator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetGammaNumerator(System.Int32)">
            <summary>
            Sets the GammaNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaNumerator">The Gamma Numerator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.GammaDenominator">
            <summary>
            Gets the Gamma Denominator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetGammaDenominator(System.Int32)">
            <summary>
            Sets the GammaDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaDenominator">The Gamma Denominator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.GammaRatio">
            <summary>
            Gets the Gamma Ratio.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.ColorCorrectionOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Color Correction table.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetColorCorrectionOffset(System.Int32)">
            <summary>
            Sets the ColorCorrectionOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intColorCorrectionOffset">The Color Correction Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.PostageStampOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Postage Stamp image data.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetPostageStampOffset(System.Int32)">
            <summary>
            Sets the PostageStampOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPostageStampOffset">The Postage Stamp Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.ScanLineOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Scan Line table.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetScanLineOffset(System.Int32)">
            <summary>
            Sets the ScanLineOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intScanLineOffset">The Scan Line Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.AttributesType">
            <summary>
            Gets the type of Alpha channel data contained in the file.
            0: No Alpha data included.
            1: Undefined data in the Alpha field, can be ignored
            2: Undefined data in the Alpha field, but should be retained
            3: Useful Alpha channel data is present
            4: Pre-multiplied Alpha (see description below)
            5-127: RESERVED
            128-255: Un-assigned
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.TargaExtensionArea.SetAttributesType(System.Int32)">
            <summary>
            Sets the AttributesType property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intAttributesType">The Attributes Type value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.ScanLineTable">
            <summary>
            Gets a list of offsets from the beginning of the file that point to the start of the next scan line, 
            in the order that the image was saved 
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.TargaExtensionArea.ColorCorrectionTable">
            <summary>
            Gets a list of Colors where each Color value is the desired Color correction for that entry.
            This allows the user to store a correction table for image remapping or LUT driving.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.Utilities">
            <summary>
            Utilities functions used by the TargaImage class.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.Utilities.GetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Gets an int value representing the subset of bits from a single Byte.
            </summary>
            <param name="b">The Byte used to get the subset of bits from.</param>
            <param name="offset">The offset of bits starting from the right.</param>
            <param name="count">The number of bits to read.</param>
            <returns>
            An int value representing the subset of bits.
            </returns>
            <remarks>
            Given -> b = 00110101 
            A call to GetBits(b, 2, 4)
            GetBits looks at the following bits in the byte -> 00{1101}00
            Returns 1101 as an int (13)
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.General.Utilities.GetColorFrom2Bytes(System.Byte,System.Byte)">
            <summary>
            Reads ARGB values from the 16 bits of two given Bytes in a 1555 format.
            </summary>
            <param name="one">The first Byte.</param>
            <param name="two">The Second Byte.</param>
            <returns>A System.Drawing.Color with a ARGB values read from the two given Bytes</returns>
            <remarks>
            Gets the ARGB values from the 16 bits in the two bytes based on the below diagram
            |   BYTE 1   |  BYTE 2   |
            | A RRRRR GG | GGG BBBBB |
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.General.Utilities.GetIntBinaryString(System.Int32)">
            <summary>
            Gets a 32 character binary string of the specified Int32 value.
            </summary>
            <param name="n">The value to get a binary string for.</param>
            <returns>A string with the resulting binary for the supplied value.</returns>
            <remarks>
            This method was used during debugging and is left here just for fun.
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.General.Utilities.GetInt16BinaryString(System.Int16)">
            <summary>
            Gets a 16 character binary string of the specified Int16 value.
            </summary>
            <param name="n">The value to get a binary string for.</param>
            <returns>A string with the resulting binary for the supplied value.</returns>
            <remarks>
            This method was used during debugging and is left here just for fun.
            </remarks>
        </member>
        <member name="T:CSharpImageLibrary.General.Win7">
            <summary>
            Provides access to standard GDI+ Windows image formats.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.Win7.AttemptWindowsCodecs(System.String)">
            <summary>
            Attempts to load image using GDI+ codecs.
            Returns null on failure.
            </summary>
            <param name="imageFile">Path to image file.</param>
            <returns>Bitmap of image, or null if failed.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win7.AttemptWindowsCodecs(System.IO.Stream)">
            <summary>
            Attempts to load image using GDI+ codecs.
            </summary>
            <param name="stream">Entire file. NOT just pixels.</param>
            <returns>Bitmap of image, or null if failed.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win7.LoadImageWithCodecs(System.String,System.Int32@,System.Int32@)">
            <summary>
            Loads image with Windows GDI+ codecs.
            </summary>
            <param name="imageFile">Path to image file.</param>
            <param name="Width">Image Width.</param>
            <param name="Height">Image Height.</param>
            <returns>BGRA Pixels as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win7.LoadImageWithCodecs(System.IO.Stream,System.Int32@,System.Int32@,System.String)">
            <summary>
            Loads image with Windows GDI+ codecs.
            </summary>
            <param name="stream">Entire file. NOT just pixels.</param>
            <param name="Width">Image Width.</param>
            <param name="Height">Image Height.</param>
            <param name="extension"></param>
            <returns>BGRA Pixels as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win7.SaveWithCodecs(System.Windows.Media.Imaging.BitmapSource,System.IO.Stream,CSharpImageLibrary.General.ImageEngineFormat,System.Int32,System.Int32)">
            <summary>
            Save using Windows 7- GDI+ Codecs to stream.
            Only single level images supported.
            </summary>
            <param name="pixelsWithMips">BGRA pixels.</param>
            <param name="destination">Image stream to save to.</param>
            <param name="format">Destination format.</param>
            <param name="Width">Width of image.</param>
            <param name="Height">Height of image.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.Win8_10">
            <summary>
            Provides native Windows codec functionality for Windows 8.1+
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.WindowsCodecsPresent">
            <summary>
            Tests whether Windows WIC Codecs are present.
            </summary>
            <returns>True if WIC Codecs available</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.LoadWithCodecs(System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads useful information from image stream using Windows 8.1+ codecs.
            </summary>
            <param name="stream">Stream containing entire file. NOT just pixels.</param>
            <param name="decodeWidth">Width to decode as. Aspect ratio unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode as. Aspect ratio unchanged if decodeWidth = 0.</param>
            <param name="isDDS">True = image is a DDS.</param>
            <returns>BGRA Pixel Data as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.AttemptUsingWindowsCodecs(System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="imagePath">Path to image file.</param>
            <param name="decodeHeight">Height to decode to. 0 = no scaling.</param>
            <param name="decodeWidth">Width to decode to. 0 = no scaling.</param>
            <returns>Loaded Image</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.AttemptUsingWindowsCodecs(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="ImageFileData">Entire image file. NOT raw pixel data.</param>
            <param name="decodeWidth">Width to decode to. 0 = no scaling.</param>
            <param name="decodeHeight">Height to decode to. 0 = no scaling.</param>
            <returns>Loaded image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.AttemptUsingWindowsCodecs(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="stream">Stream containing entire file. NOT raw pixels.</param>
            <param name="decodeWidth">Width to decode to. Aspect unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode to. Aspect unchanged if decodeWidth = 0.</param>
            <returns>BitmapImage of stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.LoadWithCodecs(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads useful information from an image file.
            </summary>
            <param name="imageFile">Path to image file.</param>
            <param name="decodeWidth">Width to decode to. Aspect unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode to. Aspect unchanged if decodeWidth = 0.</param>
            <param name="isDDS">True = Image is a DDS.</param>
            <returns>BGRA Pixel Data as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.Win8_10.SaveWithCodecs(System.Windows.Media.Imaging.BitmapSource,System.IO.Stream,CSharpImageLibrary.General.ImageEngineFormat)">
            <summary>
            Saves image using internal Codecs - DDS and mippables not supported.
            </summary>
            <param name="image">Image as bmp source.</param>
            <param name="destination">Image stream to save to.</param>
            <param name="format">Destination image format.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.MipHandling">
            <summary>
            Determines how Mipmaps are handled.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.MipHandling.Default">
            <summary>
            If mips are present, they are used, otherwise regenerated.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.MipHandling.KeepExisting">
            <summary>
            Keeps existing mips if existing. Doesn't generate new ones either way.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.MipHandling.GenerateNew">
            <summary>
            Removes old mips and generates new ones.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.MipHandling.KeepTopOnly">
            <summary>
            Removes all but the top mip. Used for single mip formats.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageEngine">
            <summary>
            Provides main image functions
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.ImageEngine.WindowsWICCodecsAvailable">
            <summary>
            True = Windows WIC Codecs are present (8+)
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.#cctor">
            <summary>
            Constructor. Checks WIC status before any other operation.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.LoadImage(System.String,CSharpImageLibrary.General.Format@,System.Int32,System.Boolean,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@,System.Boolean)">
            <summary>
            Loads image from file.
            </summary>
            <param name="imagePath">Path to image file.</param>
            <param name="Format">Detected format.</param>
            <param name="enforceResize">True = image resized to desiredMaxDimension if no suitable mipmap.</param>
            <param name="header">DDS header of image.</param>
            <param name="desiredMaxDimension">Largest dimension to load as.</param>
            <param name="mergeAlpha">True = Flattens alpha down, directly affecting RGB.</param>
            <returns>List of Mipmaps.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.LoadImage(System.IO.Stream,CSharpImageLibrary.General.Format@,System.String,System.Int32,System.Boolean,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@,System.Boolean)">
            <summary>
            Loads image from stream.
            </summary>
            <param name="stream">Full image stream.</param>
            <param name="Format">Detected format.</param>
            <param name="extension">File extension. Used to determine format more easily.</param>
            <param name="mergeAlpha">ONLY valid when enforceResize is true. True = Flattens alpha down, directly affecting RGB.</param>
            <param name="enforceResize">True = image resized to desiredMaxDimension if no suitable mipmap.</param>
            <param name="header">DDS header of image.</param>
            <param name="desiredMaxDimension">Largest dimension to load as. ASSUMES SQUARE.</param>
            <returns>List of Mipmaps.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.Save(System.Collections.Generic.List{CSharpImageLibrary.General.MipMap},CSharpImageLibrary.General.ImageEngineFormat,System.IO.Stream,CSharpImageLibrary.General.MipHandling,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Save mipmaps as given format to stream.
            </summary>
            <param name="MipMaps">List of Mips to save.</param>
            <param name="format">Desired format.</param>
            <param name="destination">Stream to save to.</param>
            <param name="mipChoice">Determines how to handle mipmaps.</param>
            <param name="maxDimension">Maximum value for either image dimension.</param>
            <param name="mergeAlpha">True = alpha flattened down, directly affecting RGB.</param>
            <param name="mipToSave">0 based index on which mipmap to make top of saved image.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.DestroyMipMaps(System.Collections.Generic.List{CSharpImageLibrary.General.MipMap},System.Int32)">
            <summary>
            Destroys mipmaps. Expects at least one mipmap in given list.
            </summary>
            <param name="MipMaps">List of Mipmaps.</param>
            <returns>Number of mips present.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.GenerateThumbnailToStream(System.IO.Stream,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates a thumbnail image as quickly and efficiently as possible.
            </summary>
            <param name="stream">Full image stream.</param>
            <param name="maxHeight">Max height to decode at. 0 means ignored, and aspect respected.</param>
            <param name="maxWidth">Max width to decode at. 0 means ignored, and aspect respected.</param>
            <param name="mergeAlpha">DXT1 only. True = Flatten alpha into RGB.</param>
            <param name="requireTransparency">True = uses PNG compression instead of JPG.</param>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.GenerateThumbnailToFile(System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Generates a thumbnail of image and saves it to a file.
            </summary>
            <param name="stream">Fully formatted image stream.</param>
            <param name="destination">File path to save to.</param>
            <param name="maxDimension">Maximum value for either image dimension.</param>
            <param name="mergeAlpha">DXT1 only. True = Flatten alpha into RGB.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageEngine.ParseFromString(System.String)">
            <summary>
            Parses a string to an ImageEngineFormat.
            </summary>
            <param name="format">String representation of ImageEngineFormat.</param>
            <returns>ImageEngineFormat of format.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageEngineFormat">
            <summary>
            Indicates image format.
            Use FORMAT struct.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.Unknown">
            <summary>
            Unknown image format. Using this as a save/load format will fail that operation.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.JPG">
            <summary>
            Standard JPEG image handled by everything.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.PNG">
            <summary>
            Standard PNG image handled by everything. Uses alpha channel if available.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.BMP">
            <summary>
            Standard BMP image handled by everything.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.TGA">
            <summary>
            Targa image. Multipage format. Can be used for mipmaps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_DXT1">
            <summary>
            (BC1) Block Compressed Texture. Compresses 4x4 texels.
            Used for Simple Non Alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_DXT2">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. Premultiplied alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_DXT3">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_DXT4">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. Premultiplied alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_DXT5">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_ARGB">
            <summary>
            Uncompressed ARGB DDS.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_ATI1">
            <summary>
            (BC4) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. 8 bit single channel with alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_V8U8">
            <summary>
            Uncompressed pair of 8 bit channels.
            Used for Normal (bump) maps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_G8_L8">
            <summary>
            Pair of 8 bit channels.
            Used for Luminescence.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_A8L8">
            <summary>
            Alpha and single channel luminescence.
            Uncompressed.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_RGB">
            <summary>
            RGB. No alpha. 
            Uncompressed.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.ImageEngineFormat.DDS_ATI2_3Dc">
            <summary>
            (BC5) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. Pair of 8 bit channels.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.Format">
            <summary>
            Indicates image format and whether it's a mippable format or not.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.General.Format.InternalFormat">
            <summary>
            Image format
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.Format.IsMippable">
            <summary>
            True = can have mipmaps.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.General.Format.BlockSize">
            <summary>
            Size of a compressed block.
            Returns -1 if format is not block compressed
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.Format.#ctor(CSharpImageLibrary.General.ImageEngineFormat)">
            <summary>
            Initialises a Format with an image format.
            </summary>
            <param name="format">Image format</param>
        </member>
        <member name="M:CSharpImageLibrary.General.Format.ToString">
            <summary>
            Displays useful information about state of object.
            </summary>
            <returns>More useful description of object.</returns>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageFormats">
            <summary>
            Provides format functionality
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.General.ImageFormats.SupportedExtensions">
            <summary>
            File extensions supported. Used to get initial format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseFourCC(System.Int32)">
            <summary>
            Converts a DDS FourCC to a Format.
            </summary>
            <param name="FourCC">DDS FourCC to check.</param>
            <returns>Format specified by FourCC. Otherwise ARGB.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseFormat(System.IO.Stream,System.String,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@)">
            <summary>
            Gets image format from stream containing image file, along with extension of image file.
            </summary>
            <param name="imgData">Stream containing entire image file. NOT just pixels.</param>
            <param name="extension">Extension of image file.</param>
            <returns>Format of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseFormat(System.IO.Stream,CSharpImageLibrary.General.ImageFormats.SupportedExtensions,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@)">
            <summary>
            Gets Format of image.
            </summary>
            <param name="imgData">Stream containing entire image. NOT just pixels.</param>
            <param name="extension">Type of file.</param>
            <returns>Format of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseExtension(System.String)">
            <summary>
            Gets file extension from string of extension.
            </summary>
            <param name="extension">String containing file extension.</param>
            <returns>SupportedExtension of extension.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseFormat(System.String,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@)">
            <summary>
            Gets image format of image file.
            </summary>
            <param name="imagePath">Path to image file.</param>
            <returns>Format of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseDDSFormat(System.IO.Stream,CSharpImageLibrary.General.DDSGeneral.DDS_HEADER@)">
            <summary>
            Reads DDS format from DDS Header. 
            Not guaranteed to work. Format 'optional' in header.
            </summary>
            <param name="stream">Stream containing full image file. NOT just pixels.</param>
            <param name="header">DDS Header information.</param>
            <returns>Format of DDS.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.ParseDDSFormat(System.String)">
            <summary>
            Reads DDS format from header given a filename.
            </summary>
            <param name="imagePath">Image filename.</param>
            <returns>Format of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.FindFormatInString(System.String)">
            <summary>
            Searches for a format within a string. Good for automatic file naming.
            </summary>
            <param name="stringWithFormatInIt">String containing format somewhere in it.</param>
            <returns>Format in string, or UNKNOWN otherwise.</returns>
        </member>
        <member name="M:CSharpImageLibrary.General.ImageFormats.GetExtensionOfFormat(CSharpImageLibrary.General.ImageEngineFormat)">
            <summary>
            Gets file extension of supported surface formats.
            Doesn't include preceding dot.
            </summary>
            <param name="format">Format to get file extension for.</param>
            <returns>File extension without dot.</returns>
        </member>
        <member name="T:CSharpImageLibrary.ViewModel">
            <summary>
            View model for the main Converter form
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.DXT1_CodecTest">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
    </members>
</doc>
